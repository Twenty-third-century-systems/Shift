// <auto-generated />
using System;
using Fridge.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fridge.Migrations
{
    [DbContext(typeof(MainDatabaseContext))]
    [Migration("20210204145723_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Fridge.Models.AmendedArticle", b =>
                {
                    b.Property<int>("AmendedArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("article");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("AmendedArticleId");

                    b.HasIndex("ArticleId");

                    b.ToTable("amended_article");
                });

            modelBuilder.Entity("Fridge.Models.ArticleOfAssociation", b =>
                {
                    b.Property<int>("ArticleOfAssociationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<bool>("Other")
                        .HasColumnType("bit")
                        .HasColumnName("other");

                    b.Property<bool>("TableA")
                        .HasColumnType("bit")
                        .HasColumnName("table_A");

                    b.Property<bool>("TableB")
                        .HasColumnType("bit")
                        .HasColumnName("table_B");

                    b.HasKey("ArticleOfAssociationId");

                    b.ToTable("article_of_association");
                });

            modelBuilder.Entity("Fridge.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<bool>("CanSort")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasDefaultValueSql("(N'')")
                        .IsFixedLength(true);

                    b.Property<string>("District")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasDefaultValueSql("(N'')")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("char(35)")
                        .HasDefaultValueSql("(N'')")
                        .IsFixedLength(true);

                    b.HasKey("CityId");

                    b.HasIndex(new[] { "CountryCode" }, "CountryCode");

                    b.ToTable("city");
                });

            modelBuilder.Entity("Fridge.Models.Country", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasDefaultValueSql("(N'')")
                        .IsFixedLength(true);

                    b.Property<string>("Continent")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasDefaultValueSql("(N'Asia')");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(52)
                        .IsUnicode(false)
                        .HasColumnType("char(52)")
                        .HasDefaultValueSql("(N'')")
                        .IsFixedLength(true);

                    b.Property<string>("Region")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasDefaultValueSql("(N'')")
                        .IsFixedLength(true);

                    b.HasKey("Code");

                    b.ToTable("country");
                });

            modelBuilder.Entity("Fridge.Models.Designation", b =>
                {
                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("DesignationId");

                    b.ToTable("designation");
                });

            modelBuilder.Entity("Fridge.Models.EntityName", b =>
                {
                    b.Property<int>("EntityNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<int>("NameSearchId")
                        .HasColumnType("int")
                        .HasColumnName("name_search");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("value");

                    b.HasKey("EntityNameId");

                    b.HasIndex("NameSearchId");

                    b.HasIndex("StatusId");

                    b.ToTable("suggested_name");
                });

            modelBuilder.Entity("Fridge.Models.EntityOffice", b =>
                {
                    b.Property<int>("EntityOfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("email_address");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("mobile_number");

                    b.Property<string>("PhysicalAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("physical_address");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("postal_address");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("telephone_number");

                    b.HasKey("EntityOfficeId");

                    b.HasIndex("CityId");

                    b.ToTable("office");
                });

            modelBuilder.Entity("Fridge.Models.EntityRoles", b =>
                {
                    b.Property<int>("EntityRolesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<bool>("Director")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("director");

                    b.Property<bool>("Member")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("member");

                    b.Property<bool>("Secretary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("secretary");

                    b.HasKey("EntityRolesId");

                    b.ToTable("private_entity_roles");
                });

            modelBuilder.Entity("Fridge.Models.ExaminationTask", b =>
                {
                    b.Property<int>("ExaminationTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<Guid>("AssignedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("assigned_by");

                    b.Property<DateTime>("DateAssigned")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("date_assigned");

                    b.Property<Guid>("ExaminerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("assigned_to");

                    b.Property<DateTime>("ExpectedDateOfCompletion")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("expected_date_of_completion");

                    b.HasKey("ExaminationTaskId");

                    b.ToTable("task");
                });

            modelBuilder.Entity("Fridge.Models.ForeignEntity", b =>
                {
                    b.Property<int>("ForeignEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("CompanyReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("company_reference");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("char(3)")
                        .HasColumnName("country");

                    b.Property<string>("ForeignEntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("ForeignEntityId");

                    b.HasIndex("CountryCode");

                    b.ToTable("foreign_entity");
                });

            modelBuilder.Entity("Fridge.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("description");

                    b.HasKey("GenderId");

                    b.ToTable("gender");
                });

            modelBuilder.Entity("Fridge.Models.MemorandumObject", b =>
                {
                    b.Property<int>("MemorandumObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<int>("MemorundumId")
                        .HasColumnType("int")
                        .HasColumnName("memorandum");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("MemorandumObjectId");

                    b.HasIndex("MemorundumId");

                    b.ToTable("memorandum_object");
                });

            modelBuilder.Entity("Fridge.Models.MemorandumOfAssociation", b =>
                {
                    b.Property<int>("MemorandumOfAssociationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("LiabilityClause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("liability_clause");

                    b.Property<string>("ShareClause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("share_clause");

                    b.HasKey("MemorandumOfAssociationId");

                    b.ToTable("memorandum_of_association");
                });

            modelBuilder.Entity("Fridge.Models.NameSearch", b =>
                {
                    b.Property<int>("NameSearchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("application");

                    b.Property<int>("DesignationId")
                        .HasColumnType("int")
                        .HasColumnName("designation");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiry_date");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("justification");

                    b.Property<int>("ReasonForSearchId")
                        .HasColumnType("int")
                        .HasColumnName("reason_for_search");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ref");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service");

                    b.HasKey("NameSearchId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("ReasonForSearchId");

                    b.HasIndex("Reference")
                        .IsUnique()
                        .HasFilter("[ref] IS NOT NULL");

                    b.HasIndex("ServiceId");

                    b.ToTable("name_search");
                });

            modelBuilder.Entity("Fridge.Models.PrivateEntity", b =>
                {
                    b.Property<int>("PrivateEntityId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("application");

                    b.Property<int?>("ArticlesOfAssociationId")
                        .HasColumnType("int")
                        .HasColumnName("articles");

                    b.Property<int?>("EntityNameId")
                        .HasColumnType("int")
                        .HasColumnName("name");

                    b.Property<int?>("EntityOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("office");

                    b.Property<int?>("LastApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("last_application");

                    b.Property<int?>("LastApplicationServiceApplicationId")
                        .HasColumnType("int");

                    b.Property<int?>("MemorandumOfAssociationId")
                        .HasColumnType("int")
                        .HasColumnName("memorandum");

                    b.Property<string>("Reference")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("reference");

                    b.HasKey("PrivateEntityId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ArticlesOfAssociationId");

                    b.HasIndex("EntityNameId");

                    b.HasIndex("EntityOfficeId");

                    b.HasIndex("LastApplicationId");

                    b.HasIndex("LastApplicationServiceApplicationId");

                    b.HasIndex("MemorandumOfAssociationId");

                    b.ToTable("private_entity");
                });

            modelBuilder.Entity("Fridge.Models.PrivateEntityHasForeignEntity", b =>
                {
                    b.Property<int>("PrivateEntityId")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("pvt_entity");

                    b.Property<int>("ForeignEntityId")
                        .HasColumnType("int")
                        .HasColumnName("foreign_entity");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("subscription");

                    b.HasKey("PrivateEntityId", "ForeignEntityId");

                    b.HasIndex("ForeignEntityId");

                    b.HasIndex("PrivateEntityId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("pvt_entity_has_foreign_entity");
                });

            modelBuilder.Entity("Fridge.Models.PrivateEntityHasPrivateEntity", b =>
                {
                    b.Property<int>("OwnerId")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("owner");

                    b.Property<int>("OwnsId")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("owned");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("subscription");

                    b.HasKey("OwnerId", "OwnsId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("OwnsId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("pvt_entity_has_pvt_entity");
                });

            modelBuilder.Entity("Fridge.Models.PrivateEntityHasSubscriber", b =>
                {
                    b.Property<int>("PrivateEntityId")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("entity");

                    b.Property<int>("SubscriberId")
                        .HasColumnType("int")
                        .HasColumnName("subscriber");

                    b.Property<int>("RolesId")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("subscription");

                    b.HasKey("PrivateEntityId", "SubscriberId");

                    b.HasIndex("PrivateEntityId");

                    b.HasIndex("RolesId");

                    b.HasIndex("SubscriberId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("pvt_entity_has_subscriber");
                });

            modelBuilder.Entity("Fridge.Models.PrivateEntitySubscriber", b =>
                {
                    b.Property<int>("PrivateEntitySubscriberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("country_code");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("first_name");

                    b.Property<int>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("national_id");

                    b.Property<string>("PhysicalAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("physical_address");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("surname");

                    b.HasKey("PrivateEntitySubscriberId");

                    b.HasIndex("GenderId");

                    b.ToTable("subscriber");
                });

            modelBuilder.Entity("Fridge.Models.PrivateEntitySubscription", b =>
                {
                    b.Property<int>("PrivateEntitySubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<long?>("OrdinaryShares")
                        .HasColumnType("bigint")
                        .HasColumnName("ordinary");

                    b.Property<long?>("PreferenceShares")
                        .HasColumnType("bigint")
                        .HasColumnName("preference");

                    b.HasKey("PrivateEntitySubscriptionId");

                    b.ToTable("subscription");
                });

            modelBuilder.Entity("Fridge.Models.ProcessingDepartment", b =>
                {
                    b.Property<int>("ProcessingDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.HasKey("ProcessingDepartmentId");

                    b.ToTable("department");
                });

            modelBuilder.Entity("Fridge.Models.ReasonForSearch", b =>
                {
                    b.Property<int>("ReasonForSearchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.HasKey("ReasonForSearchId");

                    b.ToTable("reason_for_search");
                });

            modelBuilder.Entity("Fridge.Models.ServiceApplication", b =>
                {
                    b.Property<int>("ServiceApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city");

                    b.Property<DateTime?>("DateExamined")
                        .HasColumnType("datetime2")
                        .HasColumnName("examined_on");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("datetime2")
                        .HasColumnName("submitted_on");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("deleted");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user");

                    b.HasKey("ServiceApplicationId");

                    b.HasIndex("CityId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TaskId");

                    b.ToTable("application");
                });

            modelBuilder.Entity("Fridge.Models.ServiceType", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<bool>("CanBeApplied")
                        .HasColumnType("bit")
                        .HasColumnName("can_be_applied");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<int>("ProcessingDepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.HasKey("ServiceTypeId");

                    b.HasIndex("ProcessingDepartmentId");

                    b.ToTable("service");
                });

            modelBuilder.Entity("Fridge.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("description");

                    b.HasKey("StatusId");

                    b.ToTable("status");
                });

            modelBuilder.Entity("Fridge.Models.AmendedArticle", b =>
                {
                    b.HasOne("Fridge.Models.ArticleOfAssociation", "ArticleOfAssociation")
                        .WithMany("AmendedArticles")
                        .HasForeignKey("ArticleId")
                        .IsRequired();

                    b.Navigation("ArticleOfAssociation");
                });

            modelBuilder.Entity("Fridge.Models.City", b =>
                {
                    b.HasOne("Fridge.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryCode")
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Fridge.Models.EntityName", b =>
                {
                    b.HasOne("Fridge.Models.NameSearch", "NameSearch")
                        .WithMany("EntityNames")
                        .HasForeignKey("NameSearchId")
                        .IsRequired();

                    b.HasOne("Fridge.Models.Status", "Status")
                        .WithMany("EntityNames")
                        .HasForeignKey("StatusId")
                        .IsRequired();

                    b.Navigation("NameSearch");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Fridge.Models.EntityOffice", b =>
                {
                    b.HasOne("Fridge.Models.City", "City")
                        .WithMany("EntityOffices")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Fridge.Models.ForeignEntity", b =>
                {
                    b.HasOne("Fridge.Models.Country", "Country")
                        .WithMany("ForeignEntities")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Fridge.Models.MemorandumObject", b =>
                {
                    b.HasOne("Fridge.Models.MemorandumOfAssociation", "MemorandumOfAssociation")
                        .WithMany("MemorandumObjects")
                        .HasForeignKey("MemorundumId")
                        .IsRequired();

                    b.Navigation("MemorandumOfAssociation");
                });

            modelBuilder.Entity("Fridge.Models.NameSearch", b =>
                {
                    b.HasOne("Fridge.Models.ServiceApplication", "ServiceApplication")
                        .WithMany("NameSearches")
                        .HasForeignKey("ApplicationId")
                        .IsRequired();

                    b.HasOne("Fridge.Models.Designation", "Designation")
                        .WithMany("NameSearches")
                        .HasForeignKey("DesignationId")
                        .IsRequired();

                    b.HasOne("Fridge.Models.ReasonForSearch", "ReasonForSearch")
                        .WithMany("NameSearches")
                        .HasForeignKey("ReasonForSearchId")
                        .IsRequired();

                    b.HasOne("Fridge.Models.ServiceType", "Service")
                        .WithMany("NameSearches")
                        .HasForeignKey("ServiceId")
                        .IsRequired();

                    b.Navigation("Designation");

                    b.Navigation("ReasonForSearch");

                    b.Navigation("Service");

                    b.Navigation("ServiceApplication");
                });

            modelBuilder.Entity("Fridge.Models.PrivateEntity", b =>
                {
                    b.HasOne("Fridge.Models.ArticleOfAssociation", "ArticlesOfAssociation")
                        .WithMany("PvtEntities")
                        .HasForeignKey("ArticlesOfAssociationId");

                    b.HasOne("Fridge.Models.EntityName", "EntityName")
                        .WithMany("PvtEntities")
                        .HasForeignKey("EntityNameId");

                    b.HasOne("Fridge.Models.EntityOffice", "EntityOffice")
                        .WithMany("PrivateEntities")
                        .HasForeignKey("EntityOfficeId");

                    b.HasOne("Fridge.Models.ServiceApplication", "ServiceApplication")
                        .WithMany("PvtEntities")
                        .HasForeignKey("LastApplicationId");

                    b.HasOne("Fridge.Models.ServiceApplication", "LastApplication")
                        .WithMany()
                        .HasForeignKey("LastApplicationServiceApplicationId");

                    b.HasOne("Fridge.Models.MemorandumOfAssociation", "MemorandumOfAssociation")
                        .WithMany("PrivateEntities")
                        .HasForeignKey("MemorandumOfAssociationId");

                    b.Navigation("ArticlesOfAssociation");

                    b.Navigation("EntityName");

                    b.Navigation("EntityOffice");

                    b.Navigation("LastApplication");

                    b.Navigation("MemorandumOfAssociation");

                    b.Navigation("ServiceApplication");
                });

            modelBuilder.Entity("Fridge.Models.PrivateEntityHasForeignEntity", b =>
                {
                    b.HasOne("Fridge.Models.ForeignEntity", "ForeignEntityNavigation")
                        .WithMany("PvtEntityHasForeignEntities")
                        .HasForeignKey("ForeignEntityId")
                        .IsRequired();

                    b.HasOne("Fridge.Models.PrivateEntity", "PrivateEntity")
                        .WithMany("PvtEntityHasForeignEntities")
                        .HasForeignKey("PrivateEntityId")
                        .IsRequired();

                    b.HasOne("Fridge.Models.PrivateEntitySubscription", "PrivateEntitySubscription")
                        .WithMany("PrivateEntityHasForeignEntities")
                        .HasForeignKey("SubscriptionId")
                        .IsRequired();

                    b.Navigation("ForeignEntityNavigation");

                    b.Navigation("PrivateEntity");

                    b.Navigation("PrivateEntitySubscription");
                });

            modelBuilder.Entity("Fridge.Models.PrivateEntityHasPrivateEntity", b =>
                {
                    b.HasOne("Fridge.Models.PrivateEntity", "OwnerNavigation")
                        .WithMany("PvtEntityHasPvtEntityOwnerNavigations")
                        .HasForeignKey("OwnerId")
                        .IsRequired();

                    b.HasOne("Fridge.Models.PrivateEntity", "OwnsNavigation")
                        .WithMany("PvtEntityHasPvtEntityOwnedNavigations")
                        .HasForeignKey("OwnsId")
                        .IsRequired();

                    b.HasOne("Fridge.Models.PrivateEntitySubscription", "PrivateEntitySubscription")
                        .WithMany("PrivateEntityHasPvtEntities")
                        .HasForeignKey("SubscriptionId")
                        .IsRequired();

                    b.Navigation("OwnerNavigation");

                    b.Navigation("OwnsNavigation");

                    b.Navigation("PrivateEntitySubscription");
                });

            modelBuilder.Entity("Fridge.Models.PrivateEntityHasSubscriber", b =>
                {
                    b.HasOne("Fridge.Models.PrivateEntity", "PrivateEntity")
                        .WithMany("PvtEntityHasSubcribers")
                        .HasForeignKey("PrivateEntityId")
                        .IsRequired();

                    b.HasOne("Fridge.Models.EntityRoles", "RolesInEntityRoles")
                        .WithMany("PvtEntityHasSubscribers")
                        .HasForeignKey("RolesId")
                        .IsRequired();

                    b.HasOne("Fridge.Models.PrivateEntitySubscriber", "Subscriber")
                        .WithMany("PrivateEntityHasSubscribers")
                        .HasForeignKey("SubscriberId")
                        .IsRequired();

                    b.HasOne("Fridge.Models.PrivateEntitySubscription", "PrivateEntitySubscription")
                        .WithMany("PrivateEntityHasSubscribers")
                        .HasForeignKey("SubscriptionId")
                        .IsRequired();

                    b.Navigation("PrivateEntity");

                    b.Navigation("PrivateEntitySubscription");

                    b.Navigation("RolesInEntityRoles");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("Fridge.Models.PrivateEntitySubscriber", b =>
                {
                    b.HasOne("Fridge.Models.Gender", "Gender")
                        .WithMany("PrivateEntitySubscribers")
                        .HasForeignKey("GenderId")
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Fridge.Models.ServiceApplication", b =>
                {
                    b.HasOne("Fridge.Models.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId");

                    b.HasOne("Fridge.Models.ServiceType", "ServiceType")
                        .WithMany("Applications")
                        .HasForeignKey("ServiceId");

                    b.HasOne("Fridge.Models.Status", "Status")
                        .WithMany("Applications")
                        .HasForeignKey("StatusId");

                    b.HasOne("Fridge.Models.ExaminationTask", "ExaminationTask")
                        .WithMany("Applications")
                        .HasForeignKey("TaskId");

                    b.Navigation("City");

                    b.Navigation("ExaminationTask");

                    b.Navigation("ServiceType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Fridge.Models.ServiceType", b =>
                {
                    b.HasOne("Fridge.Models.ProcessingDepartment", "ProcessingDepartment")
                        .WithMany("Services")
                        .HasForeignKey("ProcessingDepartmentId")
                        .IsRequired();

                    b.Navigation("ProcessingDepartment");
                });

            modelBuilder.Entity("Fridge.Models.ArticleOfAssociation", b =>
                {
                    b.Navigation("AmendedArticles");

                    b.Navigation("PvtEntities");
                });

            modelBuilder.Entity("Fridge.Models.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("EntityOffices");
                });

            modelBuilder.Entity("Fridge.Models.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("ForeignEntities");
                });

            modelBuilder.Entity("Fridge.Models.Designation", b =>
                {
                    b.Navigation("NameSearches");
                });

            modelBuilder.Entity("Fridge.Models.EntityName", b =>
                {
                    b.Navigation("PvtEntities");
                });

            modelBuilder.Entity("Fridge.Models.EntityOffice", b =>
                {
                    b.Navigation("PrivateEntities");
                });

            modelBuilder.Entity("Fridge.Models.EntityRoles", b =>
                {
                    b.Navigation("PvtEntityHasSubscribers");
                });

            modelBuilder.Entity("Fridge.Models.ExaminationTask", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Fridge.Models.ForeignEntity", b =>
                {
                    b.Navigation("PvtEntityHasForeignEntities");
                });

            modelBuilder.Entity("Fridge.Models.Gender", b =>
                {
                    b.Navigation("PrivateEntitySubscribers");
                });

            modelBuilder.Entity("Fridge.Models.MemorandumOfAssociation", b =>
                {
                    b.Navigation("MemorandumObjects");

                    b.Navigation("PrivateEntities");
                });

            modelBuilder.Entity("Fridge.Models.NameSearch", b =>
                {
                    b.Navigation("EntityNames");
                });

            modelBuilder.Entity("Fridge.Models.PrivateEntity", b =>
                {
                    b.Navigation("PvtEntityHasForeignEntities");

                    b.Navigation("PvtEntityHasPvtEntityOwnedNavigations");

                    b.Navigation("PvtEntityHasPvtEntityOwnerNavigations");

                    b.Navigation("PvtEntityHasSubcribers");
                });

            modelBuilder.Entity("Fridge.Models.PrivateEntitySubscriber", b =>
                {
                    b.Navigation("PrivateEntityHasSubscribers");
                });

            modelBuilder.Entity("Fridge.Models.PrivateEntitySubscription", b =>
                {
                    b.Navigation("PrivateEntityHasForeignEntities");

                    b.Navigation("PrivateEntityHasPvtEntities");

                    b.Navigation("PrivateEntityHasSubscribers");
                });

            modelBuilder.Entity("Fridge.Models.ProcessingDepartment", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("Fridge.Models.ReasonForSearch", b =>
                {
                    b.Navigation("NameSearches");
                });

            modelBuilder.Entity("Fridge.Models.ServiceApplication", b =>
                {
                    b.Navigation("NameSearches");

                    b.Navigation("PvtEntities");
                });

            modelBuilder.Entity("Fridge.Models.ServiceType", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("NameSearches");
                });

            modelBuilder.Entity("Fridge.Models.Status", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("EntityNames");
                });
#pragma warning restore 612, 618
        }
    }
}
