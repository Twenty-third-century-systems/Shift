//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Configuration;
using LinqToDB.Data;
using LinqToDB.Mapping;

namespace DJ.DataModels
{
	/// <summary>
	/// Database       : shwa
	/// Data Source    : DESKTOP-RMM46MK
	/// Server Version : 12.00.2000
	/// </summary>
	public partial class ShwaDB : LinqToDB.Data.DataConnection
	{
		public ITable<world_City>            Cities           { get { return this.GetTable<world_City>(); } }
		public ITable<world_Country>         Countries        { get { return this.GetTable<world_Country>(); } }
		public ITable<world_Countrylanguage> Countrylanguages { get { return this.GetTable<world_Countrylanguage>(); } }

		// public ShwaDB()
		// {
		// 	InitDataContext();
		// 	InitMappingSchema();
		// }

		public ShwaDB(LinqToDbConnectionOptions<ShwaDB> options)
			: base(options)
		{
			// InitDataContext();
			// InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();
	}

	[Table(Schema="world", Name="city")]
	public partial class world_City
	{
		[PrimaryKey, Identity   ] public int    ID          { get; set; } // int
		[Column,     NotNull    ] public string Name        { get; set; } // char(35)
		[Column,     NotNull    ] public string CountryCode { get; set; } // char(3)
		[Column,     NotNull    ] public string District    { get; set; } // char(20)
		[Column,     NotNull    ] public int    Population  { get; set; } // int
		[Column,        Nullable] public int?   CanSort     { get; set; } // int
	}

	[Table(Schema="world", Name="country")]
	public partial class world_Country
	{
		[PrimaryKey, NotNull    ] public string   Code           { get; set; } // char(3)
		[Column,     NotNull    ] public string   Name           { get; set; } // char(52)
		[Column,     NotNull    ] public string   Continent      { get; set; } // varchar(13)
		[Column,     NotNull    ] public string   Region         { get; set; } // char(26)
		[Column,     NotNull    ] public decimal  SurfaceArea    { get; set; } // numeric(10, 2)
		[Column,        Nullable] public short?   IndepYear      { get; set; } // smallint
		[Column,     NotNull    ] public int      Population     { get; set; } // int
		[Column,        Nullable] public decimal? LifeExpectancy { get; set; } // numeric(3, 1)
		[Column,        Nullable] public decimal? GNP            { get; set; } // numeric(10, 2)
		[Column,        Nullable] public decimal? GNPOld         { get; set; } // numeric(10, 2)
		[Column,     NotNull    ] public string   LocalName      { get; set; } // char(45)
		[Column,     NotNull    ] public string   GovernmentForm { get; set; } // char(45)
		[Column,        Nullable] public string   HeadOfState    { get; set; } // char(60)
		[Column,        Nullable] public int?     Capital        { get; set; } // int
		[Column,     NotNull    ] public string   Code2          { get; set; } // char(2)
	}

	[Table(Schema="world", Name="countrylanguage")]
	public partial class world_Countrylanguage
	{
		[PrimaryKey(1), NotNull] public string  CountryCode { get; set; } // char(3)
		[PrimaryKey(2), NotNull] public string  Language    { get; set; } // char(30)
		[Column,        NotNull] public char    IsOfficial  { get; set; } // varchar(1)
		[Column,        NotNull] public decimal Percentage  { get; set; } // numeric(4, 1)
	}

	public static partial class SqlFunctions
	{
		#region Enum2strCountryContinent

		[Sql.Function(Name="world.enum2str$country$Continent", ServerSideOnly=true)]
		public static string Enum2strCountryContinent(byte? @setval)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Enum2strCountrylanguageIsOfficial

		[Sql.Function(Name="world.enum2str$countrylanguage$IsOfficial", ServerSideOnly=true)]
		public static string Enum2strCountrylanguageIsOfficial(byte? @setval)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NormEnumCountryContinent

		[Sql.Function(Name="world.norm_enum$country$Continent", ServerSideOnly=true)]
		public static string NormEnumCountryContinent(string @setval)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NormEnumCountrylanguageIsOfficial

		[Sql.Function(Name="world.norm_enum$countrylanguage$IsOfficial", ServerSideOnly=true)]
		public static string NormEnumCountrylanguageIsOfficial(string @setval)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Str2enumCountryContinent

		[Sql.Function(Name="world.str2enum$country$Continent", ServerSideOnly=true)]
		public static byte? Str2enumCountryContinent(string @setval)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Str2enumCountrylanguageIsOfficial

		[Sql.Function(Name="world.str2enum$countrylanguage$IsOfficial", ServerSideOnly=true)]
		public static byte? Str2enumCountrylanguageIsOfficial(string @setval)
		{
			throw new InvalidOperationException();
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static world_City Find(this ITable<world_City> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static world_Country Find(this ITable<world_Country> table, string Code)
		{
			return table.FirstOrDefault(t =>
				t.Code == Code);
		}

		public static world_Countrylanguage Find(this ITable<world_Countrylanguage> table, string CountryCode, string Language)
		{
			return table.FirstOrDefault(t =>
				t.CountryCode == CountryCode &&
				t.Language    == Language);
		}
	}
}

#pragma warning restore 1591
